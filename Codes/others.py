# -*- coding: utf-8 -*-
"""DM1.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTcZtizYeS94ypfzspdVgBM1YS7FoN-9
"""


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import scipy.io
from sklearn import metrics
from sklearn.cluster import DBSCAN
from sklearn.metrics import accuracy_score
def purity_score(y_true, y_pred):
    contingency_matrix = metrics.cluster.contingency_matrix(y_true, y_pred)
    return np.sum(np.amax(contingency_matrix, axis=0)) / np.sum(contingency_matrix) 
mat = scipy.io.loadmat('cstr.mat')

fea=pd.DataFrame(mat['fea'])

gnd=pd.DataFrame(mat['gnd'])
print(gnd.shape)

#Kmeans
kmeans5 = KMeans(n_clusters =5, init = 'k-means++')
y_pred5 = kmeans5.fit_predict(fea)
kmeans7 = KMeans(n_clusters = 7, init = 'k-means++')
y_pred7 = kmeans7.fit_predict(fea)
kmeans9= KMeans(n_clusters = 9, init = 'k-means++')
y_pred9 = kmeans9.fit_predict(fea)
purity5=purity_score(gnd,y_pred5)
print("CSTR: purity for Kmeans k=5:",purity5)   
purity7=purity_score(gnd,y_pred7)
print("CSTR: purity for Kmeans k=7:",purity7)
purity9=purity_score(gnd,y_pred9)
print("CSTR: purity for Kmeans k=9:",purity9) 
acc5=accuracy_score(gnd, y_pred5)
print("CSTR: accuracy for Kmeans k=5:",acc5)
acc7=accuracy_score(gnd, y_pred7)
print("CSTR: accuracy for Kmeans k=7:",acc7)
acc9=accuracy_score(gnd, y_pred9)
print("CSTR: accuracy for Kmeans k=9:",acc9)
#DB
DB1=DBSCAN( min_samples=2).fit(fea)
y_pred1=DB1.labels_
DB2=DBSCAN( min_samples=3).fit(fea)
y_pred2=DB2.labels_
DB3=DBSCAN( min_samples=4).fit(fea)
y_pred3=DB3.labels_
purity1=purity_score(gnd,y_pred1)
print("CSTR: purity for DBScan with 2 minimum samples:",purity1)   
purity2=purity_score(gnd,y_pred2)
print("CSTR: purity for DBScan with 3 minimum samples:",purity2)
purity3=purity_score(gnd,y_pred3)
print("CSTR: purity for DBScan with 4 minimum samples:",purity3) 
acc1=accuracy_score(gnd, y_pred1)
print("CSTR: accuracy for DBScan with 2 minimum samples::",acc1)
acc2=accuracy_score(gnd, y_pred2)
print("CSTR: accuracy for DBScan with 3 minimum samples:",acc2)
acc3=accuracy_score(gnd, y_pred3)
print("CSTR: accuracy for DBScan with 4 minimum samples:",acc3)

#Fuzzy
C1=np.matrix([1 for i in range(0,1000)]).reshape(1000,1)
C2=np.matrix([0 for i in range(0,1000)]).reshape(1000,1)
#50 iteration
for i in range(50):
  dist1=0
  dist2=0
  for i in range(0,475):
     dist1+=np.square(np.array(fea.iloc[i,:]) - C1)
     dist2+=np.square(np.array(fea.iloc[i,:]) - C2)
  #dist_1=np.sum(np.square(fea - C1),axis=1)
  #dist_2=np.sum(np.square(fea - C2),axis=1)
  W_C1=dist_2/(dist_1 + dist_2)
  W_C2=1-W_C1
  SSE=np.sum(np.multiply(dist_1, W_C1)) + np.sum(np.multiply(dist_2, W_C2))
  C1_old=C1
  C2_old=C2
  #print(W_C1.shape,W_C2.shape)
  C1=np.matrix([0 for i in range(0,1000)]).reshape(1000,1)
  C2=np.matrix([0 for i in range(0,1000)]).reshape(1000,1)
  for i in range(0,475):
    C1=np.add(C1,np.multiply((W_C1),np.array(fea.iloc[i,:])))
    C2=np.add(C2,np.multiply((W_C2),np.array(fea.iloc[i,:])))
  C1=C1/np.sum(np.square(W_C1))
  C2=C2/np.sum(np.square(W_C2))
  print(C1.shape)
  print(C1_old.shape)
  s1=np.sum(np.absolute(C1_old-C1))
  s2=np.sum(np.absolute(C2_old-C2))
  L1_sum=s1+s2
  if L1_sum <= 0.001:
    print("After "+ str(i+1) + " iterations, with L1_sum="+str(L1_sum)+",the clusters converge.")
    break
print("Converged C1:")
print(C1)
print("Converged C2:")
print(C2)
y_pred2=[]
for X in fea:
  if (np.square(X-C1))<(np.square(X-C2)):
    y_pred2.append(1)
  else:
    y_pred2.append(2)
print(y_pred2)



import pandas as pd
import numpy as np
import scipy.io
mat1 = scipy.io.loadmat('COIL20.mat')
print(mat1)

fea1=pd.DataFrame(mat1['fea'])
gnd1=pd.DataFrame(mat1['gnd'])
print(fea1.shape)
print(gnd1.shape)

#Kmeans
kmeans5 = KMeans(n_clusters =5, init = 'k-means++')
y_pred5 = kmeans5.fit_predict(fea1)
kmeans7 = KMeans(n_clusters = 7, init = 'k-means++')
y_pred7 = kmeans7.fit_predict(fea1)
kmeans9= KMeans(n_clusters = 9, init = 'k-means++')
y_pred9 = kmeans9.fit_predict(fea1)
purity5=purity_score(gnd1,y_pred5)
print("COIL20: purity for Kmeans k=5:",purity5)   
purity7=purity_score(gnd1,y_pred7)
print("COIL20: purity for Kmeans k=7:",purity7)
purity9=purity_score(gnd1,y_pred9)
print("COIL20: purity for Kmeans k=9:",purity9) 
acc5=accuracy_score(gnd1, y_pred5)
print("COIL20: accuracy for Kmeans k=5:",acc5)
acc7=accuracy_score(gnd1, y_pred7)
print("COIL20: accuracy for Kmeans k=7:",acc7)
acc9=accuracy_score(gnd1, y_pred9)
print("COIL20: accuracy for Kmeans k=9:",acc9)
#DB
DB1=DBSCAN( min_samples=2).fit(fea1)
y_pred1=DB1.labels_
DB2=DBSCAN( min_samples=3).fit(fea1)
y_pred2=DB2.labels_
DB3=DBSCAN( min_samples=4).fit(fea1)
y_pred3=DB3.labels_
purity1=purity_score(gnd1,y_pred1)
print("COIL20: purity for DBScan with 2 minimum samples:",purity1)   
purity2=purity_score(gnd1,y_pred2)
print("COIL20: purity for DBScan with 3 minimum samples:",purity2)
purity3=purity_score(gnd1,y_pred3)
print("COIL20: purity for DBScan with 4 minimum samples:",purity3) 
acc1=accuracy_score(gnd1, y_pred1)
print("COIL20: accuracy for DBScan with 2 minimum samples::",acc1)
acc2=accuracy_score(gnd1, y_pred2)
print("COIL20: accuracy for DBScan with 3 minimum samples::",acc2)
acc3=accuracy_score(gnd1, y_pred3)
print("COIL20: accuracy for DBScan with 4 minimum samples:",acc3)

#Fuzzy
C1=np.matrix([1 for i in range(0,1024)])
C2=np.matrix([0 for i in range(0,1024)])
#50 iteration
for i in range(50):
  dist_1=np.sum(np.square(fea1 - C1),axis=1)
  dist_2=np.sum(np.square(fea1 - C2),axis=1)
  W_C1=dist_2/(dist_1 + dist_2)
  W_C2=1-W_C1
  SSE=np.sum(np.multiply(dist_1, W_C1)) + np.sum(np.multiply(dist_2, W_C2))
  C1_old=C1
  C2_old=C2
  #print(W_C1.shape,W_C2.shape)
  C1=np.matmul(np.transpose(np.square(W_C1)),fea1)/np.sum(np.square(W_C1))
  C2=np.matmul(np.transpose(np.square(W_C2)),fea1)/np.sum(np.square(W_C2))
  #print(C1.shape)
  #print(C1_old.shape)
  s1=np.sum(np.absolute(C1_old-C1))
  s2=np.sum(np.absolute(C2_old-C2))
  L1_sum=s1+s2
  if L1_sum <= 0.001:
    print("After "+ str(i+1) + " iterations, with L1_sum="+str(L1_sum)+",the clusters converge.")
    break
print("Converged C1:")
print(C1)
print("Converged C2:")
print(C2)
y_pred2=[]
for X in fea1:
  if (np.square(X-C1))<(np.square(X-C2)):
    y_pred2.append(1)
  else:
    y_pred2.append(2)
print(y_pred2)



mat2 = scipy.io.loadmat('k1b.mat')

X=pd.DataFrame(mat2['X'])
Y=pd.DataFrame(mat2['Y'])
y=pd.DataFrame(mat2['y'])

#Kmeans
kmeans5 = KMeans(n_clusters =5, init = 'k-means++')
y_pred5 = kmeans5.fit_predict(X)
kmeans7 = KMeans(n_clusters = 7, init = 'k-means++')
y_pred7 = kmeans7.fit_predict(X)
kmeans9= KMeans(n_clusters = 9, init = 'k-means++')
y_pred9 = kmeans9.fit_predict(X)
purity5=purity_score(y,y_pred5)
print("k1b: purity for Kmeans k=5:",purity5)   
purity7=purity_score(y,y_pred7)
print("k1b: purity for Kmeans k=7:",purity7)
purity9=purity_score(y,y_pred9)
print("k1b: purity for Kmeans k=9:",purity9) 
acc5=accuracy_score(y, y_pred5)
print("k1b: accuracy for Kmeans k=5:",acc5)
acc7=accuracy_score(y, y_pred7)
print("k1b: accuracy for Kmeans k=7:",acc7)
acc9=accuracy_score(y, y_pred9)
print("k1b: accuracy for Kmeans k=9:",acc9)
#DB
DB1=DBSCAN( min_samples=1).fit(X)
y_pred1=DB1.labels_
DB2=DBSCAN( min_samples=2).fit(X)
y_pred2=DB2.labels_
DB3=DBSCAN( min_samples=3).fit(X)
y_pred3=DB3.labels_
purity1=purity_score(y,y_pred1)
print("k1b: purity for DBScan with 1 minimum samples:",purity1)   
purity2=purity_score(y,y_pred2)
print("k1b: purity for DBScan with 2 minimum samples:",purity2)
purity3=purity_score(y,y_pred3)
print("k1b: purity for DBScan with 3 minimum samples:",purity3)
acc1=accuracy_score(y, y_pred1)
print("k1b: accuracy for DBScan with 1 minimum samples:",acc1)
acc2=accuracy_score(y, y_pred2)
print("k1b: accuracy for DBScan with 2 minimum samples:",acc2)
acc3=accuracy_score(y, y_pred3)
print("k1b: accuracy for DBScan with 3 minimum samples:",acc3) 
#Fuzzy
C1=np.matrix([1 for i in range(0,21839)])
C2=np.matrix([0 for i in range(0,21839)])
#50 iteration
for i in range(50):
  dist_1=np.sum(np.square(X - C1),axis=1)
  dist_2=np.sum(np.square(X - C2),axis=1)
  W_C1=dist_2/(dist_1 + dist_2)
  W_C2=1-W_C1
  SSE=np.sum(np.multiply(dist_1, W_C1)) + np.sum(np.multiply(dist_2, W_C2))
  C1_old=C1
  C2_old=C2
  #print(W_C1.shape,W_C2.shape)
  C1=np.matmul(np.transpose(np.square(W_C1)),X)/np.sum(np.square(W_C1))
  C2=np.matmul(np.transpose(np.square(W_C2)),X)/np.sum(np.square(W_C2))
  #print(C1.shape)
  #print(C1_old.shape)
  s1=np.sum(np.absolute(C1_old-C1))
  s2=np.sum(np.absolute(C2_old-C2))
  L1_sum=s1+s2
  if L1_sum <= 0.001:
    print("After "+ str(i+1) + " iterations, with L1_sum="+str(L1_sum)+",the clusters converge.")
    break
print("Converged C1:")
print(C1)
print("Converged C2:")
print(C2)
y_pred2=[]
for x in X:
  if (np.square(x-C1))<(np.square(x-C2)):
    y_pred2.append(1)
  else:
    y_pred2.append(2)
print(y_pred2)



mat3 = scipy.io.loadmat('re0.mat')

X1=pd.DataFrame(mat3['X'])
Y1=pd.DataFrame(mat3['Y'])
y1=pd.DataFrame(mat3['y'])
print(X1.shape)
print(y1.shape)

#Kmeans
kmeans5 = KMeans(n_clusters =5, init = 'k-means++')
y_pred5 = kmeans5.fit_predict(X1)
kmeans7 = KMeans(n_clusters = 7, init = 'k-means++')
y_pred7 = kmeans7.fit_predict(X1)
kmeans9= KMeans(n_clusters = 9, init = 'k-means++')
y_pred9 = kmeans9.fit_predict(X1)
purity5=purity_score(y1,y_pred5)
print("re0: purity for Kmeans k=5:",purity5)   
purity7=purity_score(y1,y_pred7)
print("re0: purity for Kmeans k=7:",purity7)
purity9=purity_score(y1,y_pred9)
print("re0: purity for Kmeans k=9:",purity9) 
acc5=accuracy_score(y1, y_pred5)
print("re0: accuracy for Kmeans k=5:",acc5)
acc7=accuracy_score(y1, y_pred7)
print("re0: accuracy for Kmeans k=7:",acc7)
acc9=accuracy_score(y1, y_pred9)
print("re0: accuracy for Kmeans k=9:",acc9)
#DB
DB1=DBSCAN( min_samples=2).fit(X1)
y_pred1=DB1.labels_
DB2=DBSCAN( min_samples=3).fit(X1)
y_pred2=DB2.labels_
DB3=DBSCAN( min_samples=4).fit(X1)
y_pred3=DB3.labels_
purity1=purity_score(y1,y_pred1)
print("re0: purity for DBScan with 2 minimum samples:",purity1)   
purity2=purity_score(y1,y_pred2)
print("re0: purity for DBScan with 3 minimum samples:",purity2)
purity3=purity_score(y1,y_pred3)
print("re0: purity for DBScan with 4 minimum samples:",purity3)
acc1=accuracy_score(y1, y_pred1)
print("re0: accuracy for DBScan with 2 minimum samples:",acc1)
acc2=accuracy_score(y1, y_pred2)
print("re0: accuracy for DBScan with 3 minimum samples:",acc2)
acc3=accuracy_score(y1, y_pred3)
print("re0: accuracy for DBScan with 4 minimum samples:",acc3) 
#Fuzzy
C1=np.matrix([1 for i in range(0,21839)])
C2=np.matrix([0 for i in range(0,21839)])
#50 iteration
for i in range(50):
  dist_1=np.sum(np.square(X1 - C1),axis=1)
  dist_2=np.sum(np.square(X1 - C2),axis=1)
  W_C1=dist_2/(dist_1 + dist_2)
  W_C2=1-W_C1
  SSE=np.sum(np.multiply(dist_1, W_C1)) + np.sum(np.multiply(dist_2, W_C2))
  C1_old=C1
  C2_old=C2
  #print(W_C1.shape,W_C2.shape)
  C1=np.matmul(np.transpose(np.square(W_C1)),X1)/np.sum(np.square(W_C1))
  C2=np.matmul(np.transpose(np.square(W_C2)),X1)/np.sum(np.square(W_C2))
  #print(C1.shape)
  #print(C1_old.shape)
  s1=np.sum(np.absolute(C1_old-C1))
  s2=np.sum(np.absolute(C2_old-C2))
  L1_sum=s1+s2
  if L1_sum <= 0.001:
    print("After "+ str(i+1) + " iterations, with L1_sum="+str(L1_sum)+",the clusters converge.")
    break
print("Converged C1:")
print(C1)
print("Converged C2:")
print(C2)
y_pred2=[]
for x in X1:
  if (np.square(x-C1))<(np.square(x-C2)):
    y_pred2.append(1)
  else:
    y_pred2.append(2)
print(y_pred2)
